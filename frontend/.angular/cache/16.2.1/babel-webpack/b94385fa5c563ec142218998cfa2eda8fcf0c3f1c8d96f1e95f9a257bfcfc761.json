{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8080/tinyslack/';\n    this.options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n    };\n  }\n  // récupérer tous les messages en BDD\n  getMessages() {\n    return this.http.get(this.url + 'messages');\n  }\n  // récupérer tous les messages d'un canal\n  getMessagesFromChannel(channel) {\n    return this.http.get(this.url + 'channels/' + channel.channelName + '/messages');\n  }\n  // ajouter un nouveau message en BDD\n  postMessage(messageContent, user, channel) {\n    const body = {\n      messageContent: messageContent,\n      user: user,\n      channel: channel\n    };\n    return this.http.post(this.url + 'messages', body);\n  }\n  // modifier un message existant en BDD\n  patchMessage(message) {\n    const body = {\n      messageId: message.messageId,\n      messageContent: message.messageContent,\n      messageDate: message.messageDate,\n      user: message.user,\n      channel: message.channel\n    };\n    return this.http.patch(this.url + 'messages/' + message.messageId, body);\n  }\n  // supprimer un message existant en BDD\n  deleteMessage(message) {\n    return this.http.delete(this.url + 'messages/' + message.messageId);\n  }\n}\n_class = MessageService;\n_class.ɵfac = function MessageService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","MessageService","constructor","http","url","options","headers","set","getMessages","get","getMessagesFromChannel","channel","channelName","postMessage","messageContent","user","body","post","patchMessage","message","messageId","messageDate","patch","deleteMessage","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\frontend\\src\\app\\Service\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Message } from '../Model/message';\r\nimport { Channel } from '../Model/channel';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../Model/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  url = 'http://localhost:8080/tinyslack/';\r\n\r\n  options = {\r\n    headers: new HttpHeaders().set(\r\n      'Content-Type',\r\n      'application/x-www-form-urlencoded',\r\n    ),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // récupérer tous les messages en BDD\r\n  getMessages() {\r\n    return this.http.get(this.url + 'messages');\r\n  }\r\n\r\n  // récupérer tous les messages d'un canal\r\n  getMessagesFromChannel(channel: Channel): Observable<Message[] | any> {\r\n    return this.http.get(\r\n      this.url + 'channels/' + channel.channelName + '/messages',\r\n    );\r\n  }\r\n\r\n  // ajouter un nouveau message en BDD\r\n  postMessage(messageContent: string, user: User, channel: Channel) {\r\n    const body = {\r\n      messageContent: messageContent,\r\n      user: user,\r\n      channel: channel,\r\n    };\r\n    return this.http.post(this.url + 'messages', body);\r\n  }\r\n\r\n  // modifier un message existant en BDD\r\n  patchMessage(message: Message) {\r\n    const body = {\r\n      messageId: message.messageId,\r\n      messageContent: message.messageContent,\r\n      messageDate: message.messageDate,\r\n      user: message.user,\r\n      channel: message.channel,\r\n    };\r\n    return this.http.patch(this.url + 'messages/' + message.messageId, body);\r\n  }\r\n\r\n  // supprimer un message existant en BDD\r\n  deleteMessage(message: Message) {\r\n    return this.http.delete(this.url + 'messages/' + message.messageId);\r\n  }\r\n}"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAU9D,OAAM,MAAOC,cAAc;EAUzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATxB,KAAAC,GAAG,GAAG,kCAAkC;IAExC,KAAAC,OAAO,GAAG;MACRC,OAAO,EAAE,IAAIN,WAAW,EAAE,CAACO,GAAG,CAC5B,cAAc,EACd,mCAAmC;KAEtC;EAEsC;EAEvC;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,IAAI,CAACL,GAAG,GAAG,UAAU,CAAC;EAC7C;EAEA;EACAM,sBAAsBA,CAACC,OAAgB;IACrC,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAClB,IAAI,CAACL,GAAG,GAAG,WAAW,GAAGO,OAAO,CAACC,WAAW,GAAG,WAAW,CAC3D;EACH;EAEA;EACAC,WAAWA,CAACC,cAAsB,EAAEC,IAAU,EAAEJ,OAAgB;IAC9D,MAAMK,IAAI,GAAG;MACXF,cAAc,EAAEA,cAAc;MAC9BC,IAAI,EAAEA,IAAI;MACVJ,OAAO,EAAEA;KACV;IACD,OAAO,IAAI,CAACR,IAAI,CAACc,IAAI,CAAC,IAAI,CAACb,GAAG,GAAG,UAAU,EAAEY,IAAI,CAAC;EACpD;EAEA;EACAE,YAAYA,CAACC,OAAgB;IAC3B,MAAMH,IAAI,GAAG;MACXI,SAAS,EAAED,OAAO,CAACC,SAAS;MAC5BN,cAAc,EAAEK,OAAO,CAACL,cAAc;MACtCO,WAAW,EAAEF,OAAO,CAACE,WAAW;MAChCN,IAAI,EAAEI,OAAO,CAACJ,IAAI;MAClBJ,OAAO,EAAEQ,OAAO,CAACR;KAClB;IACD,OAAO,IAAI,CAACR,IAAI,CAACmB,KAAK,CAAC,IAAI,CAAClB,GAAG,GAAG,WAAW,GAAGe,OAAO,CAACC,SAAS,EAAEJ,IAAI,CAAC;EAC1E;EAEA;EACAO,aAAaA,CAACJ,OAAgB;IAC5B,OAAO,IAAI,CAAChB,IAAI,CAACqB,MAAM,CAAC,IAAI,CAACpB,GAAG,GAAG,WAAW,GAAGe,OAAO,CAACC,SAAS,CAAC;EACrE;;SAjDWnB,cAAc;;mBAAdA,MAAc,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAd3B,MAAc;EAAA4B,OAAA,EAAd5B,MAAc,CAAA6B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}