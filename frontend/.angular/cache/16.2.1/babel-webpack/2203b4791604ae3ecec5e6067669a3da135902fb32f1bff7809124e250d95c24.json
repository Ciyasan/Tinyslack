{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8080/tinyslack/';\n    this.options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n    };\n  }\n  getMessages() {\n    return this.http.get(this.url + 'messages');\n  }\n  getMessagesFromChannel(channel) {\n    return this.http.get(this.url + 'channels/' + channel.channelName + '/messages');\n  }\n  postMessage(messageContent, user, channel) {\n    const body = {\n      messageContent: messageContent,\n      user: user,\n      channel: channel\n    };\n    return this.http.post(this.url + 'messages', body); // requete http envers bdd\n  }\n}\n_class = MessageService;\n_class.ɵfac = function MessageService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","MessageService","constructor","http","url","options","headers","set","getMessages","get","getMessagesFromChannel","channel","channelName","postMessage","messageContent","user","body","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\Service\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Messages } from '../Model/messages';\r\nimport { Channels } from '../Model/channels';\r\nimport { Observable } from 'rxjs';\r\nimport { Users } from '../Model/users';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  url = 'http://localhost:8080/tinyslack/';\r\n\r\n  options = {\r\n    headers: new HttpHeaders().set(\r\n      'Content-Type',\r\n      'application/x-www-form-urlencoded'\r\n    ),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getMessages() {\r\n    return this.http.get(this.url + 'messages');\r\n  }\r\n\r\n  getMessagesFromChannel(channel: Channels): Observable<Messages[] | any> {\r\n    return this.http.get(\r\n      this.url + 'channels/' + channel.channelName + '/messages'\r\n    );\r\n  }\r\n\r\n  postMessage(messageContent: string, user: Users, channel: Channels) {\r\n    const body = {\r\n      messageContent: messageContent,\r\n      user: user,\r\n      channel: channel,\r\n    };\r\n    return this.http.post(this.url + 'messages', body); // requete http envers bdd\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAU9D,OAAM,MAAOC,cAAc;EAUzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATxB,KAAAC,GAAG,GAAG,kCAAkC;IAExC,KAAAC,OAAO,GAAG;MACRC,OAAO,EAAE,IAAIN,WAAW,EAAE,CAACO,GAAG,CAC5B,cAAc,EACd,mCAAmC;KAEtC;EAEsC;EAEvCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,IAAI,CAACL,GAAG,GAAG,UAAU,CAAC;EAC7C;EAEAM,sBAAsBA,CAACC,OAAiB;IACtC,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAClB,IAAI,CAACL,GAAG,GAAG,WAAW,GAAGO,OAAO,CAACC,WAAW,GAAG,WAAW,CAC3D;EACH;EAEAC,WAAWA,CAACC,cAAsB,EAAEC,IAAW,EAAEJ,OAAiB;IAChE,MAAMK,IAAI,GAAG;MACXF,cAAc,EAAEA,cAAc;MAC9BC,IAAI,EAAEA,IAAI;MACVJ,OAAO,EAAEA;KACV;IACD,OAAO,IAAI,CAACR,IAAI,CAACc,IAAI,CAAC,IAAI,CAACb,GAAG,GAAG,UAAU,EAAEY,IAAI,CAAC,CAAC,CAAC;EACtD;;SA7BWf,cAAc;;mBAAdA,MAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdpB,MAAc;EAAAqB,OAAA,EAAdrB,MAAc,CAAAsB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}