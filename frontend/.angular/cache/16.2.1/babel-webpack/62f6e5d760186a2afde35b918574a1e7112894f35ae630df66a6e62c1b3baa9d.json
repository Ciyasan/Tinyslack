{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\n//Validator perso pour check si password = passwordConfirm\nfunction passwordsMatchValidator(control) {\n  const password = control.get('password');\n  const passwordConfirm = control.get('passwordConfirm');\n  if (password && passwordConfirm && password.value !== passwordConfirm.value) {\n    return {\n      passwordsNotMatch: true\n    };\n  }\n  return null;\n}\nexport let SignupComponent = class SignupComponent {\n  constructor(fb, userService, route) {\n    this.fb = fb;\n    this.userService = userService;\n    this.route = route;\n    this.signupForm = this.fb.group({\n      userName: ['', [Validators.required, Validators.maxLength(20)]],\n      userMail: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(5)]],\n      passwordConfirm: ['', [Validators.required, Validators.minLength(5)]]\n    }, {\n      validator: passwordsMatchValidator\n    });\n    this.userService.loadUsers();\n  }\n  onSubmit(event) {\n    if (this.signupForm.valid) {\n      const formValue = this.signupForm.value;\n      // vérifier si le nom d'utilisateur existe déjà\n      if (this.userService.getUserByUserName(formValue.userName)) {\n        window.alert(\"Le nom d'utilisateur existe déjà.\");\n      }\n      // vérifier si l'adresse e-mail existe déjà\n      else if (this.userService.getUserByUserEmail(formValue.userMail)) {\n        window.alert(\"L'adresse e-mail existe déjà.\");\n      } else {\n        this.userService.addUser(formValue).subscribe(response => {\n          this.route.navigate(['/login']);\n          alert('Vous êtes bien inscrit allez vous connecter');\n          console.log('Nouvel utilisateur inscrit :', response);\n        }, error => {\n          console.error(\"Erreur lors de l'inscription :\", error);\n        });\n      }\n    } else {\n      console.log(\"Le formulaire d'inscription est invalide\");\n    }\n  }\n};\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})], SignupComponent);","map":{"version":3,"names":["Component","Validators","passwordsMatchValidator","control","password","get","passwordConfirm","value","passwordsNotMatch","SignupComponent","constructor","fb","userService","route","signupForm","group","userName","required","maxLength","userMail","email","minLength","validator","loadUsers","onSubmit","event","valid","formValue","getUserByUserName","window","alert","getUserByUserEmail","addUser","subscribe","response","navigate","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\frontend\\src\\app\\component\\signup\\signup.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl,\r\n  FormControl,\r\n} from '@angular/forms';\r\nimport { User } from 'src/app/Model/user';\r\nimport { UserService } from 'src/app/Service/user.service';\r\n\r\n//Validator perso pour check si password = passwordConfirm\r\nfunction passwordsMatchValidator(\r\n  control: AbstractControl,\r\n): { [key: string]: boolean } | null {\r\n  const password = control.get('password');\r\n  const passwordConfirm = control.get('passwordConfirm');\r\n\r\n  if (password && passwordConfirm && password.value !== passwordConfirm.value) {\r\n    return { passwordsNotMatch: true };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css'],\r\n})\r\nexport class SignupComponent {\r\n  signupForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private route: Router,\r\n  ) {\r\n    this.signupForm = this.fb.group(\r\n      {\r\n        userName: ['', [Validators.required, Validators.maxLength(20)]],\r\n        userMail: ['', [Validators.required, Validators.email]],\r\n        password: ['', [Validators.required, Validators.minLength(5)]],\r\n        passwordConfirm: ['', [Validators.required, Validators.minLength(5)]],\r\n      },\r\n      { validator: passwordsMatchValidator },\r\n    );\r\n\r\n    this.userService.loadUsers();\r\n  }\r\n\r\n  onSubmit(event: Event) {\r\n    if (this.signupForm.valid) {\r\n      const formValue: User = this.signupForm.value;\r\n\r\n      // vérifier si le nom d'utilisateur existe déjà\r\n      if (this.userService.getUserByUserName(formValue.userName)) {\r\n        window.alert(\"Le nom d'utilisateur existe déjà.\");\r\n      }\r\n      // vérifier si l'adresse e-mail existe déjà\r\n      else if (this.userService.getUserByUserEmail(formValue.userMail)) {\r\n        window.alert(\"L'adresse e-mail existe déjà.\");\r\n      } else {\r\n        this.userService.addUser(formValue).subscribe(\r\n          (response: User) => {\r\n            this.route.navigate(['/login']);\r\n            alert('Vous êtes bien inscrit allez vous connecter');\r\n            console.log('Nouvel utilisateur inscrit :', response);\r\n          },\r\n          (error: HttpErrorResponse) => {\r\n            console.error(\"Erreur lors de l'inscription :\", error);\r\n          },\r\n        );\r\n      }\r\n    } else {\r\n      console.log(\"Le formulaire d'inscription est invalide\");\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAGEC,UAAU,QAGL,gBAAgB;AAIvB;AACA,SAASC,uBAAuBA,CAC9BC,OAAwB;EAExB,MAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAG,CAAC,UAAU,CAAC;EACxC,MAAMC,eAAe,GAAGH,OAAO,CAACE,GAAG,CAAC,iBAAiB,CAAC;EAEtD,IAAID,QAAQ,IAAIE,eAAe,IAAIF,QAAQ,CAACG,KAAK,KAAKD,eAAe,CAACC,KAAK,EAAE;IAC3E,OAAO;MAAEC,iBAAiB,EAAE;IAAI,CAAE;;EAGpC,OAAO,IAAI;AACb;AAOO,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAG1BC,YACUC,EAAe,EACfC,WAAwB,EACxBC,KAAa;IAFb,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,KAAK,GAALA,KAAK;IAEb,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAC7B;MACEC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACiB,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/DC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACmB,KAAK,CAAC,CAAC;MACvDhB,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACH,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9Df,eAAe,EAAE,CAAC,EAAE,EAAE,CAACL,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,CAAC;KACrE,EACD;MAAEC,SAAS,EAAEpB;IAAuB,CAAE,CACvC;IAED,IAAI,CAACU,WAAW,CAACW,SAAS,EAAE;EAC9B;EAEAC,QAAQA,CAACC,KAAY;IACnB,IAAI,IAAI,CAACX,UAAU,CAACY,KAAK,EAAE;MACzB,MAAMC,SAAS,GAAS,IAAI,CAACb,UAAU,CAACP,KAAK;MAE7C;MACA,IAAI,IAAI,CAACK,WAAW,CAACgB,iBAAiB,CAACD,SAAS,CAACX,QAAQ,CAAC,EAAE;QAC1Da,MAAM,CAACC,KAAK,CAAC,mCAAmC,CAAC;;MAEnD;MAAA,KACK,IAAI,IAAI,CAAClB,WAAW,CAACmB,kBAAkB,CAACJ,SAAS,CAACR,QAAQ,CAAC,EAAE;QAChEU,MAAM,CAACC,KAAK,CAAC,+BAA+B,CAAC;OAC9C,MAAM;QACL,IAAI,CAAClB,WAAW,CAACoB,OAAO,CAACL,SAAS,CAAC,CAACM,SAAS,CAC1CC,QAAc,IAAI;UACjB,IAAI,CAACrB,KAAK,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAC/BL,KAAK,CAAC,6CAA6C,CAAC;UACpDM,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;QACvD,CAAC,EACAI,KAAwB,IAAI;UAC3BF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACxD,CAAC,CACF;;KAEJ,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;EAE3D;CACD;AAhDY5B,eAAe,GAAA8B,UAAA,EAL3BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWjC,eAAe,CAgD3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}