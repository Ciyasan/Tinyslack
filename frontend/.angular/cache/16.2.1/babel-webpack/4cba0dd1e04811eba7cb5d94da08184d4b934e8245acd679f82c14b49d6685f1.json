{"ast":null,"code":"var _class;\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  // Constructeur\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // Déclaration de variable\n    this.isLoggedIn = false;\n    this.currentUser = null;\n    this.users = [];\n  }\n  // récupérer tous les utilisateurs\n  getUsers() {\n    return this.httpClient.get('http://localhost:8080/tinyslack/users');\n  }\n  // récupérer un utilisateur par son nom\n  getUserByName(userName) {\n    return this.httpClient.get('http://localhost:8080/tinyslack/users/' + userName);\n  }\n  // ajouter un nouvel utilisateur en BDD\n  addUser(user) {\n    return this.httpClient.post('http://localhost:8080/tinyslack/users', user);\n  }\n  // modifier un utilisateur existant en BDD\n  updateUser(userName, user) {\n    return this.httpClient.patch('http://localhost:8080/tinyslack/users/' + userName, user);\n  }\n  // supprimer un utilisateur existant en BDD\n  deleteUser(userName) {\n    const url = 'http://localhost:8080/tinyslack/users/' + userName;\n    return this.httpClient.delete(url).pipe(catchError(error => {\n      console.error('Error deleting user:', error);\n      // Handle the error here, e.g., display an error message.\n      return throwError(error);\n    }));\n  }\n  // Authenfication (gère les affichages en fonction du statut)\n  login() {\n    this.isLoggedIn = true;\n  }\n  logout() {\n    this.isLoggedIn = false;\n  }\n  isLoggedInUser() {\n    return this.isLoggedIn;\n  }\n  // définir l'utilisateur actuel et connecté de la session\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n  // récupérer l'utilisateur actuel et connecté de la session\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  // pour charger les users bdd dans signup\n  loadUsers() {\n    this.httpClient.get('http://localhost:8080/tinyslack/users').subscribe(data => {\n      this.users = data;\n    });\n    console.log(this.users);\n  }\n  // permet de vérifier si l'user du signup utilise un nom/mail déjà utilisé en bdd\n  getUserByUserName(userName) {\n    return this.users.find(user => user.userName === userName);\n  }\n  getUserByUserEmail(email) {\n    return this.users.find(user => user.userMail === email);\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","UserService","constructor","httpClient","isLoggedIn","currentUser","users","getUsers","get","getUserByName","userName","addUser","user","post","updateUser","patch","deleteUser","url","delete","pipe","error","console","login","logout","isLoggedInUser","setCurrentUser","getCurrentUser","loadUsers","subscribe","data","log","getUserByUserName","find","getUserByUserEmail","email","userMail","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\frontend\\src\\app\\Service\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { User } from '../Model/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  // Déclaration de variable\r\n  private isLoggedIn: boolean = false;\r\n  private currentUser: User | null = null;\r\n  private users: User[] = [];\r\n\r\n  // Constructeur\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  // récupérer tous les utilisateurs\r\n  getUsers(): Observable<User[]> {\r\n    return this.httpClient.get<User[]>('http://localhost:8080/tinyslack/users');\r\n  }\r\n\r\n  // récupérer un utilisateur par son nom\r\n  getUserByName(userName: string) {\r\n    return this.httpClient.get(\r\n      'http://localhost:8080/tinyslack/users/' + userName,\r\n    );\r\n  }\r\n\r\n  // ajouter un nouvel utilisateur en BDD\r\n  addUser(user: User): Observable<User> {\r\n    return this.httpClient.post<User>(\r\n      'http://localhost:8080/tinyslack/users',\r\n      user,\r\n    );\r\n  }\r\n\r\n  // modifier un utilisateur existant en BDD\r\n  updateUser(userName: string, user: User): Observable<User> {\r\n    return this.httpClient.patch<User>(\r\n      'http://localhost:8080/tinyslack/users/' + userName,\r\n      user,\r\n    );\r\n  }\r\n\r\n  // supprimer un utilisateur existant en BDD\r\n  deleteUser(userName: string | undefined): Observable<User> {\r\n    const url = 'http://localhost:8080/tinyslack/users/' + userName;\r\n\r\n    return this.httpClient.delete<User>(url).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error('Error deleting user:', error);\r\n        // Handle the error here, e.g., display an error message.\r\n        return throwError(error);\r\n      }),\r\n    );\r\n  }\r\n\r\n  // Authenfication (gère les affichages en fonction du statut)\r\n  login() {\r\n    this.isLoggedIn = true;\r\n  }\r\n\r\n  logout() {\r\n    this.isLoggedIn = false;\r\n  }\r\n\r\n  isLoggedInUser(): boolean {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  // définir l'utilisateur actuel et connecté de la session\r\n  setCurrentUser(user: User | null) {\r\n    this.currentUser = user;\r\n  }\r\n\r\n  // récupérer l'utilisateur actuel et connecté de la session\r\n  getCurrentUser(): User | null {\r\n    return this.currentUser;\r\n  }\r\n\r\n  // pour charger les users bdd dans signup\r\n  loadUsers() {\r\n    this.httpClient\r\n      .get<User[]>('http://localhost:8080/tinyslack/users')\r\n      .subscribe((data) => {\r\n        this.users = data;\r\n      });\r\n    console.log(this.users);\r\n  }\r\n\r\n  // permet de vérifier si l'user du signup utilise un nom/mail déjà utilisé en bdd\r\n  getUserByUserName(userName: string): User | undefined {\r\n    return this.users.find((user) => user.userName === userName);\r\n  }\r\n\r\n  getUserByUserEmail(email: string): User | undefined {\r\n    return this.users.find((user) => user.userMail === email);\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAMzD,OAAM,MAAOC,WAAW;EAMtB;EACAC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAN9B;IACQ,KAAAC,UAAU,GAAY,KAAK;IAC3B,KAAAC,WAAW,GAAgB,IAAI;IAC/B,KAAAC,KAAK,GAAW,EAAE;EAGmB;EAE7C;EACAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAS,uCAAuC,CAAC;EAC7E;EAEA;EACAC,aAAaA,CAACC,QAAgB;IAC5B,OAAO,IAAI,CAACP,UAAU,CAACK,GAAG,CACxB,wCAAwC,GAAGE,QAAQ,CACpD;EACH;EAEA;EACAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CACzB,uCAAuC,EACvCD,IAAI,CACL;EACH;EAEA;EACAE,UAAUA,CAACJ,QAAgB,EAAEE,IAAU;IACrC,OAAO,IAAI,CAACT,UAAU,CAACY,KAAK,CAC1B,wCAAwC,GAAGL,QAAQ,EACnDE,IAAI,CACL;EACH;EAEA;EACAI,UAAUA,CAACN,QAA4B;IACrC,MAAMO,GAAG,GAAG,wCAAwC,GAAGP,QAAQ;IAE/D,OAAO,IAAI,CAACP,UAAU,CAACe,MAAM,CAAOD,GAAG,CAAC,CAACE,IAAI,CAC3CpB,UAAU,CAAEqB,KAAwB,IAAI;MACtCC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACA,OAAOpB,UAAU,CAACoB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEA;EACAE,KAAKA,CAAA;IACH,IAAI,CAAClB,UAAU,GAAG,IAAI;EACxB;EAEAmB,MAAMA,CAAA;IACJ,IAAI,CAACnB,UAAU,GAAG,KAAK;EACzB;EAEAoB,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACpB,UAAU;EACxB;EAEA;EACAqB,cAAcA,CAACb,IAAiB;IAC9B,IAAI,CAACP,WAAW,GAAGO,IAAI;EACzB;EAEA;EACAc,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACrB,WAAW;EACzB;EAEA;EACAsB,SAASA,CAAA;IACP,IAAI,CAACxB,UAAU,CACZK,GAAG,CAAS,uCAAuC,CAAC,CACpDoB,SAAS,CAAEC,IAAI,IAAI;MAClB,IAAI,CAACvB,KAAK,GAAGuB,IAAI;IACnB,CAAC,CAAC;IACJR,OAAO,CAACS,GAAG,CAAC,IAAI,CAACxB,KAAK,CAAC;EACzB;EAEA;EACAyB,iBAAiBA,CAACrB,QAAgB;IAChC,OAAO,IAAI,CAACJ,KAAK,CAAC0B,IAAI,CAAEpB,IAAI,IAAKA,IAAI,CAACF,QAAQ,KAAKA,QAAQ,CAAC;EAC9D;EAEAuB,kBAAkBA,CAACC,KAAa;IAC9B,OAAO,IAAI,CAAC5B,KAAK,CAAC0B,IAAI,CAAEpB,IAAI,IAAKA,IAAI,CAACuB,QAAQ,KAAKD,KAAK,CAAC;EAC3D;;SA1FWjC,WAAW;;mBAAXA,MAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXtC,MAAW;EAAAuC,OAAA,EAAXvC,MAAW,CAAAwC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}