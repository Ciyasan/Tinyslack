{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChannelService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8080/tinyslack/';\n    this.options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n    };\n  }\n  // récupérer tous les canaux en BDD\n  getChannels() {\n    return this.http.get(this.url + 'channels');\n  }\n  // récupérer un canal en BDD par son nom\n  getChannelByName(name) {\n    return this.http.get(this.url + 'channels/' + name);\n  }\n  // ajouter un nouveau canal en BDD\n  postChannel(channel, user) {\n    const body = {\n      channelName: channel.channelName,\n      channelDescription: channel.channelDescription,\n      user: user,\n      locked: 0\n    };\n    return this.http.post(this.url + 'channels', body);\n  }\n  // modifier un canal existant en BDD\n  patchChannel(channel) {\n    const body = {\n      channelName: channel.channelName,\n      channelDescription: channel.channelDescription,\n      user: channel.user\n    };\n    return this.http.patch(this.url + 'channels/' + channel.channelName, body);\n  }\n  // supprimer un canal existant en BDD\n  deleteChannel(channel) {\n    return this.http.delete(this.url + 'channels/' + channel.channelName);\n  }\n}\n_class = ChannelService;\n_class.ɵfac = function ChannelService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","ChannelService","constructor","http","url","options","headers","set","getChannels","get","getChannelByName","name","postChannel","channel","user","body","channelName","channelDescription","locked","post","patchChannel","patch","deleteChannel","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\frontend\\src\\app\\Service\\channel.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Channel } from '../Model/channel';\r\nimport { User } from '../Model/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ChannelService {\r\n  url = 'http://localhost:8080/tinyslack/';\r\n\r\n  options = {\r\n    headers: new HttpHeaders().set(\r\n      'Content-Type',\r\n      'application/x-www-form-urlencoded',\r\n    ),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // récupérer tous les canaux en BDD\r\n  getChannels() {\r\n    return this.http.get(this.url + 'channels');\r\n  }\r\n\r\n  // récupérer un canal en BDD par son nom\r\n  getChannelByName(name: string) {\r\n    return this.http.get(this.url + 'channels/' + name);\r\n  }\r\n\r\n  // ajouter un nouveau canal en BDD\r\n  postChannel(channel: Channel, user: User) {\r\n    const body = {\r\n      channelName: channel.channelName,\r\n      channelDescription: channel.channelDescription,\r\n      user: user,\r\n      locked: 0,\r\n    };\r\n    return this.http.post(this.url + 'channels', body);\r\n  }\r\n\r\n  // modifier un canal existant en BDD\r\n  patchChannel(channel: Channel) {\r\n    const body = {\r\n      channelName: channel.channelName,\r\n      channelDescription: channel.channelDescription,\r\n      user: channel.user,\r\n    };\r\n    return this.http.patch(this.url + 'channels/' + channel.channelName, body);\r\n  }\r\n\r\n  // supprimer un canal existant en BDD\r\n  deleteChannel(channel: Channel) {\r\n    return this.http.delete(this.url + 'channels/' + channel.channelName);\r\n  }\r\n}"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,cAAc;EAUzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATxB,KAAAC,GAAG,GAAG,kCAAkC;IAExC,KAAAC,OAAO,GAAG;MACRC,OAAO,EAAE,IAAIN,WAAW,EAAE,CAACO,GAAG,CAC5B,cAAc,EACd,mCAAmC;KAEtC;EAEsC;EAEvC;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,IAAI,CAACL,GAAG,GAAG,UAAU,CAAC;EAC7C;EAEA;EACAM,gBAAgBA,CAACC,IAAY;IAC3B,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAC,IAAI,CAACL,GAAG,GAAG,WAAW,GAAGO,IAAI,CAAC;EACrD;EAEA;EACAC,WAAWA,CAACC,OAAgB,EAAEC,IAAU;IACtC,MAAMC,IAAI,GAAG;MACXC,WAAW,EAAEH,OAAO,CAACG,WAAW;MAChCC,kBAAkB,EAAEJ,OAAO,CAACI,kBAAkB;MAC9CH,IAAI,EAAEA,IAAI;MACVI,MAAM,EAAE;KACT;IACD,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACf,GAAG,GAAG,UAAU,EAAEW,IAAI,CAAC;EACpD;EAEA;EACAK,YAAYA,CAACP,OAAgB;IAC3B,MAAME,IAAI,GAAG;MACXC,WAAW,EAAEH,OAAO,CAACG,WAAW;MAChCC,kBAAkB,EAAEJ,OAAO,CAACI,kBAAkB;MAC9CH,IAAI,EAAED,OAAO,CAACC;KACf;IACD,OAAO,IAAI,CAACX,IAAI,CAACkB,KAAK,CAAC,IAAI,CAACjB,GAAG,GAAG,WAAW,GAAGS,OAAO,CAACG,WAAW,EAAED,IAAI,CAAC;EAC5E;EAEA;EACAO,aAAaA,CAACT,OAAgB;IAC5B,OAAO,IAAI,CAACV,IAAI,CAACoB,MAAM,CAAC,IAAI,CAACnB,GAAG,GAAG,WAAW,GAAGS,OAAO,CAACG,WAAW,CAAC;EACvE;;SA9CWf,cAAc;;mBAAdA,MAAc,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAd1B,MAAc;EAAA2B,OAAA,EAAd3B,MAAc,CAAA4B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}