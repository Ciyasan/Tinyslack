{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Service/channel.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CreateChannelComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez indiquer un nom de canal.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CreateChannelComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez ne pas utiliser d'espace.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CreateChannelComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez entrer une description.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class CreateChannelComponent {\n  constructor(fb, cs, route) {\n    this.fb = fb;\n    this.cs = cs;\n    this.route = route;\n    this.channelCreationForm = this.fb.group({\n      channelName: ['', [Validators.required, noSpacesValidator]],\n      description: ['', [Validators.required]]\n    });\n  }\n  onClick(event) {\n    this.cs.postChannel(this.channelCreationForm.value).subscribe();\n    alert('Ton canal a bien été créé');\n  }\n}\n// validateur personnalisé pour vérifier si une chaîne de caractères contient des espaces\n_class = CreateChannelComponent;\n_class.ɵfac = function CreateChannelComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ChannelService), i0.ɵɵdirectiveInject(i3.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-create-channel\"]],\n  decls: 14,\n  vars: 5,\n  consts: [[1, \"content\", 3, \"formGroup\", \"submit\"], [\"for\", \"channelName\"], [\"type\", \"text\", \"id\", \"channelName\", \"name\", \"channelName\", \"formControlName\", \"channelName\", \"placeholder\", \"Nom du canal\"], [4, \"ngIf\"], [\"for\", \"description\"], [\"type\", \"text\", \"id\", \"description\", \"name\", \"description\", \"formControlName\", \"description\", \"placeholder\", \"Description\"], [3, \"disabled\"]],\n  template: function CreateChannelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function CreateChannelComponent_Template_form_submit_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelement(1, \"label\", 1)(2, \"input\", 2)(3, \"br\")(4, \"br\");\n      i0.ɵɵtemplate(5, CreateChannelComponent_div_5_Template, 3, 0, \"div\", 3);\n      i0.ɵɵtemplate(6, CreateChannelComponent_div_6_Template, 3, 0, \"div\", 3);\n      i0.ɵɵelement(7, \"label\", 4)(8, \"input\", 5)(9, \"br\")(10, \"br\");\n      i0.ɵɵtemplate(11, CreateChannelComponent_div_11_Template, 3, 0, \"div\", 3);\n      i0.ɵɵelementStart(12, \"button\", 6);\n      i0.ɵɵtext(13, \"Cr\\u00E9er un canal\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.channelCreationForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.channelCreationForm.get(\"channelName\")) == null ? null : tmp_1_0.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.channelCreationForm.get(\"channelName\")) == null ? null : tmp_2_0.hasError(\"hasSpaces\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.channelCreationForm.get(\"description\")) == null ? null : tmp_3_0.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.channelCreationForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nfunction noSpacesValidator(control) {\n  const hasSpaces = /\\s/.test(control.value);\n  return hasSpaces ? {\n    hasSpaces: true\n  } : null;\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","CreateChannelComponent","constructor","fb","cs","route","channelCreationForm","group","channelName","required","noSpacesValidator","description","onClick","event","postChannel","value","subscribe","alert","_class","ɵɵdirectiveInject","i1","FormBuilder","i2","ChannelService","i3","Router","selectors","decls","vars","consts","template","CreateChannelComponent_Template","rf","ctx","ɵɵlistener","CreateChannelComponent_Template_form_submit_0_listener","$event","ɵɵelement","ɵɵtemplate","CreateChannelComponent_div_5_Template","CreateChannelComponent_div_6_Template","CreateChannelComponent_div_11_Template","ɵɵproperty","ɵɵadvance","tmp_1_0","get","hasError","tmp_2_0","tmp_3_0","invalid","control","hasSpaces","test"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\create-channel\\create-channel.component.ts","C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\create-channel\\create-channel.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ChannelService } from 'src/app/Service/channel.service';\r\n\r\n@Component({\r\n  selector: 'app-create-channel',\r\n  templateUrl: './create-channel.component.html',\r\n  styleUrls: ['./create-channel.component.css'],\r\n})\r\nexport class CreateChannelComponent {\r\n  channelCreationForm: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, public cs: ChannelService, private route: Router) {\r\n    this.channelCreationForm = this.fb.group({\r\n      channelName: ['', [Validators.required, noSpacesValidator]],\r\n      description: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  onClick(event: Event) {\r\n    this.cs.postChannel(this.channelCreationForm.value).subscribe();\r\n    alert('Ton canal a bien été créé');\r\n  }\r\n}\r\n\r\n// validateur personnalisé pour vérifier si une chaîne de caractères contient des espaces\r\nfunction noSpacesValidator(control: AbstractControl) {\r\n  const hasSpaces = /\\s/.test(control.value);\r\n  return hasSpaces ? { hasSpaces: true } : null;\r\n}","<form\r\n  class=\"content\"\r\n  [formGroup]=\"channelCreationForm\"\r\n  (submit)=\"onClick($event)\"\r\n>\r\n  <label for=\"channelName\"></label>\r\n  <input\r\n    type=\"text\"\r\n    id=\"channelName\"\r\n    name=\"channelName\"\r\n    formControlName=\"channelName\"\r\n    placeholder=\"Nom du canal\"\r\n  /><br /><br />\r\n  <div *ngIf=\"channelCreationForm.get('channelName')?.hasError('required')\">\r\n    <p>Veuillez indiquer un nom de canal.</p>\r\n  </div>\r\n  <div *ngIf=\"channelCreationForm.get('channelName')?.hasError('hasSpaces')\">\r\n    <p>Veuillez ne pas utiliser d'espace.</p>\r\n  </div>\r\n  <label for=\"description\"></label>\r\n  <input\r\n    type=\"text\"\r\n    id=\"description\"\r\n    name=\"description\"\r\n    formControlName=\"description\"\r\n    placeholder=\"Description\"\r\n  /><br /><br />\r\n  <div *ngIf=\"channelCreationForm.get('description')?.hasError('required')\">\r\n    <p>Veuillez entrer une description.</p>\r\n  </div>\r\n\r\n  <!-- <label for=\"delete\">Souhaitez-vous vérouiller votre canal ?</label>\r\n  <input class=\"Visible\" type=\"checkbox\" name=\"delete\" id=\"delete\" (change)=\"changeEvent($event)\"> -->\r\n\r\n  <button [disabled]=\"channelCreationForm.invalid\">Créer un canal</button>\r\n</form>\r\n"],"mappings":";AACA,SAGEA,UAAU,QAEL,gBAAgB;;;;;;;;ICOrBC,EAAA,CAAAC,cAAA,UAA0E;IACrED,EAAA,CAAAE,MAAA,yCAAkC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;IAE3CH,EAAA,CAAAC,cAAA,UAA2E;IACtED,EAAA,CAAAE,MAAA,yCAAkC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;IAU3CH,EAAA,CAAAC,cAAA,UAA0E;IACrED,EAAA,CAAAE,MAAA,uCAAgC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;ADb3C,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,EAAe,EAASC,EAAkB,EAAUC,KAAa;IAAjE,KAAAF,EAAE,GAAFA,EAAE;IAAsB,KAAAC,EAAE,GAAFA,EAAE;IAA0B,KAAAC,KAAK,GAALA,KAAK;IAC3E,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MACvCC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAAEC,iBAAiB,CAAC,CAAC;MAC3DC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACa,QAAQ,CAAC;KACxC,CAAC;EACJ;EAEAG,OAAOA,CAACC,KAAY;IAClB,IAAI,CAACT,EAAE,CAACU,WAAW,CAAC,IAAI,CAACR,mBAAmB,CAACS,KAAK,CAAC,CAACC,SAAS,EAAE;IAC/DC,KAAK,CAAC,2BAA2B,CAAC;EACpC;;AAGF;AAAAC,MAAA,GAhBajB,sBAAsB;;mBAAtBA,MAAsB,EAAAJ,EAAA,CAAAsB,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAxB,EAAA,CAAAsB,iBAAA,CAAAG,EAAA,CAAAC,cAAA,GAAA1B,EAAA,CAAAsB,iBAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;;QAAtBxB,MAAsB;EAAAyB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCfnCnC,EAAA,CAAAC,cAAA,cAIC;MADCD,EAAA,CAAAqC,UAAA,oBAAAC,uDAAAC,MAAA;QAAA,OAAUH,GAAA,CAAArB,OAAA,CAAAwB,MAAA,CAAe;MAAA,EAAC;MAE1BvC,EAAA,CAAAwC,SAAA,eAAiC;MAQjCxC,EAAA,CAAAyC,UAAA,IAAAC,qCAAA,iBAEM;MACN1C,EAAA,CAAAyC,UAAA,IAAAE,qCAAA,iBAEM;MACN3C,EAAA,CAAAwC,SAAA,eAAiC;MAQjCxC,EAAA,CAAAyC,UAAA,KAAAG,sCAAA,iBAEM;MAKN5C,EAAA,CAAAC,cAAA,iBAAiD;MAAAD,EAAA,CAAAE,MAAA,2BAAc;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;;;;MAhCxEH,EAAA,CAAA6C,UAAA,cAAAT,GAAA,CAAA3B,mBAAA,CAAiC;MAW3BT,EAAA,CAAA8C,SAAA,GAAkE;MAAlE9C,EAAA,CAAA6C,UAAA,UAAAE,OAAA,GAAAX,GAAA,CAAA3B,mBAAA,CAAAuC,GAAA,kCAAAD,OAAA,CAAAE,QAAA,aAAkE;MAGlEjD,EAAA,CAAA8C,SAAA,GAAmE;MAAnE9C,EAAA,CAAA6C,UAAA,UAAAK,OAAA,GAAAd,GAAA,CAAA3B,mBAAA,CAAAuC,GAAA,kCAAAE,OAAA,CAAAD,QAAA,cAAmE;MAWnEjD,EAAA,CAAA8C,SAAA,GAAkE;MAAlE9C,EAAA,CAAA6C,UAAA,UAAAM,OAAA,GAAAf,GAAA,CAAA3B,mBAAA,CAAAuC,GAAA,kCAAAG,OAAA,CAAAF,QAAA,aAAkE;MAOhEjD,EAAA,CAAA8C,SAAA,GAAwC;MAAxC9C,EAAA,CAAA6C,UAAA,aAAAT,GAAA,CAAA3B,mBAAA,CAAA2C,OAAA,CAAwC;;;;;;ADFlD,SAASvC,iBAAiBA,CAACwC,OAAwB;EACjD,MAAMC,SAAS,GAAG,IAAI,CAACC,IAAI,CAACF,OAAO,CAACnC,KAAK,CAAC;EAC1C,OAAOoC,SAAS,GAAG;IAAEA,SAAS,EAAE;EAAI,CAAE,GAAG,IAAI;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}