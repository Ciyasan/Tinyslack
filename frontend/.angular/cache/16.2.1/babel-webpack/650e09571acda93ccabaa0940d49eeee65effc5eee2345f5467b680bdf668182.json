{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Service/channel.service\";\nimport * as i3 from \"src/app/Service/user.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction CreateChannelComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez indiquer un nom de canal.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CreateChannelComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez ne pas utiliser d'espace.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CreateChannelComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez entrer une description.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class CreateChannelComponent {\n  constructor(fb, cs, us, route) {\n    this.fb = fb;\n    this.cs = cs;\n    this.us = us;\n    this.route = route;\n    this.currentUser = this.us.getCurrentUser();\n    this.channelCreationForm = this.fb.group({\n      channelName: ['', [Validators.required, noSpacesValidator]],\n      channelDescription: ['', [Validators.required]]\n    });\n  }\n  addChannel(event) {\n    // si l'utilisateur est connecté, on créé le canal\n    if (this.currentUser) {\n      const newChannel = {\n        channelId: '',\n        channelName: this.channelCreationForm.value.channelName,\n        channelDescription: this.channelCreationForm.value.channelDescription,\n        locked: 0,\n        creationDate: new Date(),\n        user: this.currentUser\n      };\n      this.cs.postChannel(newChannel, this.currentUser).subscribe(response => {\n        // Gérez la réponse du serveur\n        console.log('Réponse du serveur :', response);\n        alert('Votre canal a bien été créé');\n      });\n    }\n    // sinon, on le redirige vers la page de connexion\n    else {\n      alert('Veuillez vous connecter');\n      this.route.navigate(['/login']);\n    }\n  }\n}\n// validateur personnalisé pour vérifier si une chaîne de caractères contient des espaces\n_class = CreateChannelComponent;\n_class.ɵfac = function CreateChannelComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ChannelService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-create-channel\"]],\n  decls: 14,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"submit\"], [\"for\", \"channelName\"], [\"type\", \"text\", \"id\", \"channelName\", \"name\", \"channelName\", \"formControlName\", \"channelName\", \"placeholder\", \"Nom du canal\"], [4, \"ngIf\"], [\"for\", \"description\"], [\"type\", \"text\", \"id\", \"description\", \"name\", \"description\", \"formControlName\", \"channelDescription\", \"placeholder\", \"Description\"], [3, \"disabled\"]],\n  template: function CreateChannelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function CreateChannelComponent_Template_form_submit_0_listener($event) {\n        return ctx.addChannel($event);\n      });\n      i0.ɵɵelement(1, \"label\", 1)(2, \"input\", 2);\n      i0.ɵɵtemplate(3, CreateChannelComponent_div_3_Template, 3, 0, \"div\", 3);\n      i0.ɵɵtemplate(4, CreateChannelComponent_div_4_Template, 3, 0, \"div\", 3);\n      i0.ɵɵelement(5, \"br\")(6, \"br\")(7, \"label\", 4)(8, \"input\", 5);\n      i0.ɵɵtemplate(9, CreateChannelComponent_div_9_Template, 3, 0, \"div\", 3);\n      i0.ɵɵelement(10, \"br\")(11, \"br\");\n      i0.ɵɵelementStart(12, \"button\", 6);\n      i0.ɵɵtext(13, \"Cr\\u00E9er un canal\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.channelCreationForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.channelCreationForm.get(\"channelName\")) == null ? null : tmp_1_0.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.channelCreationForm.get(\"channelName\")) == null ? null : tmp_2_0.hasError(\"hasSpaces\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.channelCreationForm.get(\"channelDescription\")) == null ? null : tmp_3_0.hasError(\"required\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.channelCreationForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nfunction noSpacesValidator(control) {\n  const hasSpaces = /\\s/.test(control.value);\n  return hasSpaces ? {\n    hasSpaces: true\n  } : null;\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","CreateChannelComponent","constructor","fb","cs","us","route","currentUser","getCurrentUser","channelCreationForm","group","channelName","required","noSpacesValidator","channelDescription","addChannel","event","newChannel","channelId","value","locked","creationDate","Date","user","postChannel","subscribe","response","console","log","alert","navigate","_class","ɵɵdirectiveInject","i1","FormBuilder","i2","ChannelService","i3","UserService","i4","Router","selectors","decls","vars","consts","template","CreateChannelComponent_Template","rf","ctx","ɵɵlistener","CreateChannelComponent_Template_form_submit_0_listener","$event","ɵɵelement","ɵɵtemplate","CreateChannelComponent_div_3_Template","CreateChannelComponent_div_4_Template","CreateChannelComponent_div_9_Template","ɵɵproperty","ɵɵadvance","tmp_1_0","get","hasError","tmp_2_0","tmp_3_0","invalid","control","hasSpaces","test"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\create-channel\\create-channel.component.ts","C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\create-channel\\create-channel.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { User } from 'src/app/Model/user';\r\nimport { ChannelService } from 'src/app/Service/channel.service';\r\nimport { UserService } from 'src/app/Service/user.service';\r\n\r\n@Component({\r\n  selector: 'app-create-channel',\r\n  templateUrl: './create-channel.component.html',\r\n  styleUrls: ['./create-channel.component.css'],\r\n})\r\nexport class CreateChannelComponent {\r\n  channelCreationForm: FormGroup;\r\n\r\n  currentUser: User | null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public cs: ChannelService,\r\n    private us: UserService,\r\n    private route: Router\r\n  ) {\r\n    this.currentUser = this.us.getCurrentUser();\r\n    this.channelCreationForm = this.fb.group({\r\n      channelName: ['', [Validators.required, noSpacesValidator]],\r\n      channelDescription: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  addChannel(event: Event) {\r\n    // si l'utilisateur est connecté, on créé le canal\r\n    if (this.currentUser) {\r\n      const newChannel = {\r\n        channelId: '',\r\n        channelName: this.channelCreationForm.value.channelName,\r\n        channelDescription: this.channelCreationForm.value.channelDescription,\r\n        locked: 0,\r\n        creationDate: new Date(),\r\n        user: this.currentUser,\r\n      };\r\n      this.cs\r\n        .postChannel(newChannel, this.currentUser)\r\n        .subscribe((response) => {\r\n          // Gérez la réponse du serveur\r\n          console.log('Réponse du serveur :', response);\r\n          alert('Votre canal a bien été créé');\r\n        });\r\n    }\r\n    // sinon, on le redirige vers la page de connexion\r\n    else {\r\n      alert('Veuillez vous connecter');\r\n      this.route.navigate(['/login']);\r\n    }\r\n  }\r\n}\r\n\r\n// validateur personnalisé pour vérifier si une chaîne de caractères contient des espaces\r\nfunction noSpacesValidator(control: AbstractControl) {\r\n  const hasSpaces = /\\s/.test(control.value);\r\n  return hasSpaces ? { hasSpaces: true } : null;\r\n}","<form [formGroup]=\"channelCreationForm\" (submit)=\"addChannel($event)\">\r\n  <label for=\"channelName\"></label>\r\n  <input\r\n    type=\"text\"\r\n    id=\"channelName\"\r\n    name=\"channelName\"\r\n    formControlName=\"channelName\"\r\n    placeholder=\"Nom du canal\"\r\n  />\r\n  <div *ngIf=\"channelCreationForm.get('channelName')?.hasError('required')\">\r\n    <p>Veuillez indiquer un nom de canal.</p>\r\n  </div>\r\n  <div *ngIf=\"channelCreationForm.get('channelName')?.hasError('hasSpaces')\">\r\n    <p>Veuillez ne pas utiliser d'espace.</p>\r\n  </div>\r\n  <br /><br />\r\n  <label for=\"description\"></label>\r\n  <input\r\n    type=\"text\"\r\n    id=\"description\"\r\n    name=\"description\"\r\n    formControlName=\"channelDescription\"\r\n    placeholder=\"Description\"\r\n  />\r\n  <div *ngIf=\"channelCreationForm.get('channelDescription')?.hasError('required')\">\r\n    <p>Veuillez entrer une description.</p>\r\n  </div>\r\n  <br /><br />\r\n  <button [disabled]=\"channelCreationForm.invalid\">Créer un canal</button>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}