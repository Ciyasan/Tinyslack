{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  //Constructeur\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //Déclaration de variable\n    this.isLoggedIn = false;\n    this.currentUser = null;\n    this.users = [];\n  }\n  //Requete http\n  getUsers() {\n    return this.httpClient.get('http://localhost:8080/tinyslack/users');\n  }\n  addUser(user) {\n    return this.httpClient.post('http://localhost:8080/tinyslack/users', user);\n  }\n  deleteUser(userName) {\n    return this.httpClient.delete('http://localhost:8080/tinyslack/users/' + userName);\n  }\n  updateUser(userId, user) {\n    return this.httpClient.patch('http://localhost:8080/tinyslack/users/' + userId, user);\n  }\n  //Authenfication\n  login() {\n    this.isLoggedIn = true;\n  }\n  logout() {\n    this.isLoggedIn = false;\n  }\n  isLoggedInUser() {\n    return this.isLoggedIn;\n  }\n  //setCurrentUser qui va permettre de trouver l'user actuellement connecté\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  //pour charger les users bdd dans signup\n  loadUsers() {\n    this.httpClient.get('http://localhost:8080/tinyslack/users').subscribe(data => {\n      this.users = data;\n    });\n    console.log(this.users);\n  }\n  //permet de vérifier si l'user du signup utilise un nom/mail déjà utilisé en bdd\n  getUserByUserName(userName) {\n    return this.users.find(user => user.userName === userName);\n  }\n  getUserByUserEmail(email) {\n    return this.users.find(user => user.userMail === email);\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserService","constructor","httpClient","isLoggedIn","currentUser","users","getUsers","get","addUser","user","post","deleteUser","userName","delete","updateUser","userId","patch","login","logout","isLoggedInUser","setCurrentUser","getCurrentUser","loadUsers","subscribe","data","console","log","getUserByUserName","find","getUserByUserEmail","email","userMail","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\Service\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Users } from '../Model/users';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  //Déclaration de variable\r\n  private isLoggedIn: boolean = false;\r\n  private currentUser: Users | null = null;\r\n  private users: Users[] = [];\r\n\r\n  //Constructeur\r\n  constructor(private httpClient: HttpClient,) { }\r\n\r\n\r\n  //Requete http\r\n  getUsers(): Observable<Users[]> {\r\n    return this.httpClient.get<Users[]>('http://localhost:8080/tinyslack/users');\r\n  }\r\n\r\n  addUser(user: Users): Observable<Users> {\r\n    return this.httpClient.post<Users>('http://localhost:8080/tinyslack/users', user);\r\n  }\r\n\r\n  deleteUser(userName: string | undefined ): Observable<Users>  {\r\n    return this.httpClient.delete<Users>('http://localhost:8080/tinyslack/users/' + userName);\r\n  }\r\n\r\n  updateUser(userId: string, user: Users ): Observable<Users>  {\r\n    return this.httpClient.patch<Users>('http://localhost:8080/tinyslack/users/' + userId, user);\r\n  }\r\n\r\n  //Authenfication\r\n  login() {\r\n    this.isLoggedIn = true;\r\n  }\r\n\r\n  logout() {\r\n    this.isLoggedIn = false;\r\n  }\r\n\r\n  isLoggedInUser(): boolean {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  //setCurrentUser qui va permettre de trouver l'user actuellement connecté\r\n  setCurrentUser(user: Users | null) {\r\n    this.currentUser = user;\r\n  }\r\n\r\n  getCurrentUser(): Users | null {\r\n    return this.currentUser;\r\n  }\r\n\r\n\r\n  //pour charger les users bdd dans signup\r\n  loadUsers() {\r\n    this.httpClient.get<Users[]>('http://localhost:8080/tinyslack/users').subscribe((data) => {\r\n      this.users = data;\r\n    });\r\n    console.log(this.users);\r\n  }\r\n\r\n  //permet de vérifier si l'user du signup utilise un nom/mail déjà utilisé en bdd\r\n  getUserByUserName(userName: string): Users | undefined {\r\n    return this.users.find((user) => user.userName === userName);\r\n  }\r\n\r\n  getUserByUserEmail(email: string): Users | undefined {\r\n    return this.users.find((user) => user.userMail === email);\r\n  }\r\n}\r\n"],"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EAMtB;EACAC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAN9B;IACQ,KAAAC,UAAU,GAAY,KAAK;IAC3B,KAAAC,WAAW,GAAiB,IAAI;IAChC,KAAAC,KAAK,GAAY,EAAE;EAGoB;EAG/C;EACAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAU,uCAAuC,CAAC;EAC9E;EAEAC,OAAOA,CAACC,IAAW;IACjB,OAAO,IAAI,CAACP,UAAU,CAACQ,IAAI,CAAQ,uCAAuC,EAAED,IAAI,CAAC;EACnF;EAEAE,UAAUA,CAACC,QAA4B;IACrC,OAAO,IAAI,CAACV,UAAU,CAACW,MAAM,CAAQ,wCAAwC,GAAGD,QAAQ,CAAC;EAC3F;EAEAE,UAAUA,CAACC,MAAc,EAAEN,IAAW;IACpC,OAAO,IAAI,CAACP,UAAU,CAACc,KAAK,CAAQ,wCAAwC,GAAGD,MAAM,EAAEN,IAAI,CAAC;EAC9F;EAEA;EACAQ,KAAKA,CAAA;IACH,IAAI,CAACd,UAAU,GAAG,IAAI;EACxB;EAEAe,MAAMA,CAAA;IACJ,IAAI,CAACf,UAAU,GAAG,KAAK;EACzB;EAEAgB,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAChB,UAAU;EACxB;EAEA;EACAiB,cAAcA,CAACX,IAAkB;IAC/B,IAAI,CAACL,WAAW,GAAGK,IAAI;EACzB;EAEAY,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACjB,WAAW;EACzB;EAGA;EACAkB,SAASA,CAAA;IACP,IAAI,CAACpB,UAAU,CAACK,GAAG,CAAU,uCAAuC,CAAC,CAACgB,SAAS,CAAEC,IAAI,IAAI;MACvF,IAAI,CAACnB,KAAK,GAAGmB,IAAI;IACnB,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,KAAK,CAAC;EACzB;EAEA;EACAsB,iBAAiBA,CAACf,QAAgB;IAChC,OAAO,IAAI,CAACP,KAAK,CAACuB,IAAI,CAAEnB,IAAI,IAAKA,IAAI,CAACG,QAAQ,KAAKA,QAAQ,CAAC;EAC9D;EAEAiB,kBAAkBA,CAACC,KAAa;IAC9B,OAAO,IAAI,CAACzB,KAAK,CAACuB,IAAI,CAAEnB,IAAI,IAAKA,IAAI,CAACsB,QAAQ,KAAKD,KAAK,CAAC;EAC3D;;SAjEW9B,WAAW;;mBAAXA,MAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXnC,MAAW;EAAAoC,OAAA,EAAXpC,MAAW,CAAAqC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}