{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Service/message.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/Service/channel.service\";\nimport * as i4 from \"src/app/Service/user.service\";\nimport * as i5 from \"@angular/forms\";\nexport class CreateMessageComponent {\n  constructor(ms, ar, cs, us, route) {\n    this.ms = ms;\n    this.ar = ar;\n    this.cs = cs;\n    this.us = us;\n    this.route = route;\n    this.message = {\n      messageId: '',\n      messageContent: '',\n      messageDate: '',\n      channel: {\n        channelId: '',\n        channelName: '',\n        description: '',\n        protection: 0,\n        creationDate: new Date(2000 - 10 - 10),\n        user: {\n          userId: '',\n          password: '',\n          userMail: '',\n          userName: ''\n        }\n      },\n      user: {\n        userId: '',\n        password: '',\n        userMail: '',\n        userName: ''\n      }\n    };\n    // récupérer le name qui est dans l'URL pour afficher le channel correspondant\n    let name = this.ar.snapshot.params['name'];\n    this.cs.getChannelByName(name).subscribe(data => {\n      this.canalActuel = data;\n    });\n    // récupérer le user de la session en cours\n    this.currentUser = this.us.getCurrentUser();\n  }\n  addMessage() {\n    // si l'utilisateur est connecté, on envoie le message\n    if (this.currentUser) {\n      this.ms.postMessage(this.message.messageContent, this.currentUser, this.canalActuel).subscribe();\n      alert('Ton message a bien été envoyé');\n    }\n    // sinon, on le redirige vers la page de connexion\n    else {\n      alert('Veuillez vous connecter');\n      this.route.navigate(['/login']);\n    }\n  }\n}\n_class = CreateMessageComponent;\n_class.ɵfac = function CreateMessageComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ChannelService), i0.ɵɵdirectiveInject(i4.UserService), i0.ɵɵdirectiveInject(i2.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-create-message\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[\"for\", \"messageContent\"], [\"type\", \"text\", \"id\", \"messageContent\", \"name\", \"ContenuDuMessage\", \"width\", \"40%\", \"placeholder\", \"Ecris ton message ici\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"]],\n  template: function CreateMessageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\");\n      i0.ɵɵelement(1, \"label\", 0);\n      i0.ɵɵelementStart(2, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function CreateMessageComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.message.messageContent = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function CreateMessageComponent_Template_button_click_3_listener() {\n        return ctx.addMessage();\n      });\n      i0.ɵɵtext(4, \"Envoyer\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.message.messageContent);\n    }\n  },\n  dependencies: [i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm],\n  styles: [\"input[_ngcontent-%COMP%]{\\n    margin-bottom: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50L2NyZWF0ZS1tZXNzYWdlL2NyZWF0ZS1tZXNzYWdlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7QUFDdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbnB1dHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["CreateMessageComponent","constructor","ms","ar","cs","us","route","message","messageId","messageContent","messageDate","channel","channelId","channelName","description","protection","creationDate","Date","user","userId","password","userMail","userName","name","snapshot","params","getChannelByName","subscribe","data","canalActuel","currentUser","getCurrentUser","addMessage","postMessage","alert","navigate","i0","ɵɵdirectiveInject","i1","MessageService","i2","ActivatedRoute","i3","ChannelService","i4","UserService","Router","selectors","decls","vars","consts","template","CreateMessageComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵlistener","CreateMessageComponent_Template_input_ngModelChange_2_listener","$event","ɵɵelementEnd","CreateMessageComponent_Template_button_click_3_listener","ɵɵtext","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\create-message\\create-message.component.ts","C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\create-message\\create-message.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Channels } from 'src/app/Model/channels';\r\nimport { Messages } from 'src/app/Model/messages';\r\nimport { Users } from 'src/app/Model/users';\r\nimport { ChannelService } from 'src/app/Service/channel.service';\r\nimport { MessageService } from 'src/app/Service/message.service';\r\nimport { UserService } from 'src/app/Service/user.service';\r\n\r\n@Component({\r\n  selector: 'app-create-message',\r\n  templateUrl: './create-message.component.html',\r\n  styleUrls: ['./create-message.component.css'],\r\n})\r\nexport class CreateMessageComponent {\r\n  message: Messages = {\r\n    messageId: '',\r\n    messageContent: '',\r\n    messageDate: '',\r\n    channel: {\r\n      channelId: '',\r\n      channelName: '',\r\n      description: '',\r\n      protection: 0,\r\n      creationDate: new Date(2000 - 10 - 10),\r\n      user: {\r\n        userId: '',\r\n        password: '',\r\n        userMail: '',\r\n        userName: '',\r\n      },\r\n    },\r\n    user: {\r\n      userId: '',\r\n      password: '',\r\n      userMail: '',\r\n      userName: '',\r\n    },\r\n  };\r\n\r\n  canalActuel!: Channels;\r\n  currentUser: Users | null;\r\n\r\n  constructor(\r\n    private ms: MessageService,\r\n    private ar: ActivatedRoute,\r\n    private cs: ChannelService,\r\n    private us: UserService,\r\n    private route: Router\r\n  ) {\r\n    // récupérer le name qui est dans l'URL pour afficher le channel correspondant\r\n    let name = this.ar.snapshot.params['name'];\r\n    this.cs.getChannelByName(name).subscribe((data: any) => {\r\n      this.canalActuel = data;\r\n    });\r\n\r\n    // récupérer le user de la session en cours\r\n    this.currentUser = this.us.getCurrentUser();\r\n  }\r\n\r\n  addMessage() {\r\n    // si l'utilisateur est connecté, on envoie le message\r\n    if (this.currentUser) {\r\n      this.ms\r\n        .postMessage(\r\n          this.message.messageContent,\r\n          this.currentUser,\r\n          this.canalActuel\r\n        )\r\n        .subscribe();\r\n        alert('Ton message a bien été envoyé');\r\n    }\r\n    // sinon, on le redirige vers la page de connexion\r\n    else {\r\n      alert('Veuillez vous connecter');\r\n      this.route.navigate(['/login']);\r\n    }\r\n  }\r\n}","<form>\r\n  <label for=\"messageContent\"></label>\r\n  <input\r\n    type=\"text\"\r\n    id=\"messageContent\"\r\n    name=\"ContenuDuMessage\"\r\n    width=\"40%\"\r\n    placeholder=\"Ecris ton message ici\"\r\n    [(ngModel)]=\"message.messageContent\"\r\n  />\r\n\r\n  <button (click)=\"addMessage()\">Envoyer</button>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}