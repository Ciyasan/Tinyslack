{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Service/channel.service\";\nimport * as i2 from \"src/app/Service/message.service\";\nimport * as i3 from \"src/app/Service/user.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../change-channel/change-channel.component\";\nimport * as i7 from \"../message/message.component\";\nimport * as i8 from \"../create-message/create-message.component\";\nfunction ChannelComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-change-channel\", 3);\n    i0.ɵɵelementStart(2, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function ChannelComponent_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.delete());\n    });\n    i0.ɵɵtext(3, \"Supprimer\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"actualChannel\", ctx_r0.canal);\n  }\n}\nfunction ChannelComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-message\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"msg\", message_r4);\n  }\n}\nexport class ChannelComponent {\n  constructor(cs, ms, us, activeRoute, route) {\n    this.cs = cs;\n    this.ms = ms;\n    this.us = us;\n    this.activeRoute = activeRoute;\n    this.route = route;\n    this.messagesFromChannel = [];\n    this.displayForm = false;\n    let user = us.getCurrentUser();\n    if (user) this.currentUser = user;\n  }\n  ngOnInit() {\n    this.activeRoute.paramMap.subscribe(params => {\n      let user = this.us.getCurrentUser();\n      if (user) {\n        this.currentUser = user;\n      }\n      // récupérer le name en URL pour récupérer le canal associé\n      let name = params.get('name');\n      if (name) {\n        this.cs.getChannelByName(name).subscribe(data => {\n          this.canal = data;\n        });\n      }\n    });\n    // récupérer les messages liés à ce canal\n    this.ms.getMessagesFromChannel(this.canal).subscribe(messagesList => {\n      this.messagesFromChannel = messagesList;\n    });\n  }\n  // supprimer le canal\n  delete() {\n    this.cs.deleteChannel(this.canal).subscribe(response => {\n      console.log(response);\n    });\n    alert('Canal supprimé');\n    this.route.navigate(['/profile']);\n  }\n}\n_class = ChannelComponent;\n_class.ɵfac = function ChannelComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ChannelService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-channel\"]],\n  inputs: {\n    canal: \"canal\"\n  },\n  decls: 10,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"scroll\"], [4, \"ngFor\", \"ngForOf\"], [3, \"actualChannel\"], [3, \"click\"], [3, \"msg\"]],\n  template: function ChannelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"p\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, ChannelComponent_div_6_Template, 4, 1, \"div\", 0);\n      i0.ɵɵelement(7, \"div\", 1);\n      i0.ɵɵtemplate(8, ChannelComponent_div_8_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelement(9, \"app-create-message\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.canal.channelName);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.canal.channelDescription);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Cr\\u00E9ateur: \", ctx.canal.user.userName, \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.currentUser.userId == ctx.canal.user.userId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messagesFromChannel);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i6.ChangeChannelComponent, i7.MessageComponent, i8.CreateMessageComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵelement","ɵɵlistener","ChannelComponent_div_6_Template_button_click_2_listener","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","delete","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","canal","message_r4","ChannelComponent","constructor","cs","ms","us","activeRoute","route","messagesFromChannel","displayForm","user","getCurrentUser","currentUser","ngOnInit","paramMap","subscribe","params","name","get","getChannelByName","data","getMessagesFromChannel","messagesList","deleteChannel","response","console","log","alert","navigate","ɵɵdirectiveInject","i1","ChannelService","i2","MessageService","i3","UserService","i4","ActivatedRoute","Router","selectors","inputs","decls","vars","consts","template","ChannelComponent_Template","rf","ctx","ɵɵtemplate","ChannelComponent_div_6_Template","ChannelComponent_div_8_Template","ɵɵtextInterpolate","channelName","channelDescription","ɵɵtextInterpolate1","userName","userId"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\channel\\channel.component.ts","C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\channel\\channel.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { Channel } from 'src/app/Model/channel';\r\nimport { Message } from 'src/app/Model/message';\r\nimport { User } from 'src/app/Model/user';\r\nimport { ChannelService } from 'src/app/Service/channel.service';\r\nimport { MessageService } from 'src/app/Service/message.service';\r\nimport { UserService } from 'src/app/Service/user.service';\r\n\r\n@Component({\r\n  selector: 'app-channel',\r\n  templateUrl: './channel.component.html',\r\n  styleUrls: ['./channel.component.css'],\r\n})\r\n\r\nexport class ChannelComponent {\r\n  @Input() canal!: Channel;\r\n  currentUser!: User;\r\n  messagesFromChannel: Message[] = [];\r\n  displayForm: boolean = false;\r\n\r\n  constructor(\r\n    private cs: ChannelService,\r\n    private ms: MessageService,\r\n    private us: UserService,\r\n    private activeRoute: ActivatedRoute,\r\n    private route: Router\r\n  ) {\r\n    let user = us.getCurrentUser();\r\n    if (user) this.currentUser = user;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.activeRoute.paramMap.subscribe((params: ParamMap) => {\r\n      let user = this.us.getCurrentUser();\r\n      if (user) {\r\n        this.currentUser = user;\r\n      }\r\n\r\n      // récupérer le name en URL pour récupérer le canal associé\r\n      let name = params.get('name');\r\n      if (name) {\r\n        this.cs.getChannelByName(name).subscribe((data: any) => {\r\n          this.canal = data;\r\n        });\r\n      }\r\n    });\r\n    // récupérer les messages liés à ce canal\r\n    this.ms.getMessagesFromChannel(this.canal).subscribe((messagesList) => {\r\n      this.messagesFromChannel = messagesList;\r\n    });\r\n  }\r\n\r\n  // supprimer le canal\r\n  delete() {\r\n    this.cs.deleteChannel(this.canal).subscribe((response) => {\r\n      console.log(response);\r\n    });\r\n    alert('Canal supprimé');\r\n    this.route.navigate(['/profile']);\r\n  }\r\n}","<h3>{{ canal.channelName }}</h3>\r\n<p>{{ canal.channelDescription }}</p>\r\n<p>Créateur: {{ canal.user.userName }}</p>\r\n<div *ngIf=\"currentUser.userId == canal.user.userId\">\r\n  <app-change-channel [actualChannel]=\"canal\"></app-change-channel>\r\n  <button (click)=\"delete()\">Supprimer</button>\r\n</div>\r\n<div class=\"scroll\"></div>\r\n<div *ngFor=\"let message of messagesFromChannel\">\r\n  <app-message [msg]=\"message\"></app-message>\r\n</div>\r\n<app-create-message></app-create-message>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}