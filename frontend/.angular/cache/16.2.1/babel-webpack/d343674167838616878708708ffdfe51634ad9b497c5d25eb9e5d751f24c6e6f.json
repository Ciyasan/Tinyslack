{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Service/user.service\";\nimport * as i3 from \"src/app/Service/channel.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction ChangeChannelComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez indiquer un nom de canal.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChangeChannelComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez ne pas utiliser d'espace.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChangeChannelComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Veuillez entrer une description.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class ChangeChannelComponent {\n  constructor(fb, userService, cs, ar, route) {\n    this.fb = fb;\n    this.userService = userService;\n    this.cs = cs;\n    this.ar = ar;\n    this.route = route;\n    // récupérer le user de la session en cours\n    this.currentUser = this.userService.getCurrentUser();\n    this.channelModificationForm = this.fb.group({\n      channelName: ['', [Validators.required, noSpacesValidator]],\n      channelDescription: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.channelModificationForm.controls['channelName'].setValue(this.actualChannel.channelName);\n    this.channelModificationForm.controls['channelDescription'].setValue(this.actualChannel.channelDescription);\n  }\n  updateChannel(event) {\n    // si l'utilisateur est connecté, on modifie le canal\n    if (this.currentUser) {\n      const modifiedChannel = {\n        channelId: '',\n        channelName: this.channelModificationForm.value.channelName,\n        channelDescription: this.channelModificationForm.value.channelDescription,\n        locked: 0,\n        creationDate: new Date(),\n        user: this.currentUser\n      };\n      this.cs.patchChannel(modifiedChannel).subscribe(response => {\n        // Gérez la réponse du serveur\n        console.log('Réponse du serveur :', response);\n        alert('Votre canal a bien été modifié');\n      });\n    }\n    // sinon, on le redirige vers la page de connexion\n    else {\n      alert('Veuillez vous connecter');\n      this.route.navigate(['/login']);\n    }\n  }\n}\n// validateur personnalisé pour vérifier si une chaîne de caractères contient des espaces\n_class = ChangeChannelComponent;\n_class.ɵfac = function ChangeChannelComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ChannelService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-change-channel\"]],\n  inputs: {\n    actualChannel: \"actualChannel\"\n  },\n  decls: 12,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"submit\"], [\"type\", \"text\", \"id\", \"channelName\", \"name\", \"channelName\", \"formControlName\", \"channelName\", \"placeholder\", \"Nom du canal\"], [4, \"ngIf\"], [\"type\", \"text\", \"id\", \"description\", \"name\", \"description\", \"formControlName\", \"channelDescription\", \"placeholder\", \"Description\"], [3, \"disabled\"]],\n  template: function ChangeChannelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function ChangeChannelComponent_Template_form_submit_0_listener($event) {\n        return ctx.updateChannel($event);\n      });\n      i0.ɵɵelement(1, \"input\", 1);\n      i0.ɵɵtemplate(2, ChangeChannelComponent_div_2_Template, 3, 0, \"div\", 2);\n      i0.ɵɵtemplate(3, ChangeChannelComponent_div_3_Template, 3, 0, \"div\", 2);\n      i0.ɵɵelement(4, \"br\")(5, \"br\")(6, \"input\", 3);\n      i0.ɵɵtemplate(7, ChangeChannelComponent_div_7_Template, 3, 0, \"div\", 2);\n      i0.ɵɵelement(8, \"br\")(9, \"br\");\n      i0.ɵɵelementStart(10, \"button\", 4);\n      i0.ɵɵtext(11, \" Modifier \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.channelModificationForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.channelModificationForm.get(\"channelName\")) == null ? null : tmp_1_0.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.channelModificationForm.get(\"channelName\")) == null ? null : tmp_2_0.hasError(\"hasSpaces\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.channelModificationForm.get(\"description\")) == null ? null : tmp_3_0.hasError(\"required\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.channelModificationForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nfunction noSpacesValidator(control) {\n  const hasSpaces = /\\s/.test(control.value);\n  return hasSpaces ? {\n    hasSpaces: true\n  } : null;\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ChangeChannelComponent","constructor","fb","userService","cs","ar","route","currentUser","getCurrentUser","channelModificationForm","group","channelName","required","noSpacesValidator","channelDescription","ngOnInit","controls","setValue","actualChannel","updateChannel","event","modifiedChannel","channelId","value","locked","creationDate","Date","user","patchChannel","subscribe","response","console","log","alert","navigate","_class","ɵɵdirectiveInject","i1","FormBuilder","i2","UserService","i3","ChannelService","i4","ActivatedRoute","Router","selectors","inputs","decls","vars","consts","template","ChangeChannelComponent_Template","rf","ctx","ɵɵlistener","ChangeChannelComponent_Template_form_submit_0_listener","$event","ɵɵelement","ɵɵtemplate","ChangeChannelComponent_div_2_Template","ChangeChannelComponent_div_3_Template","ChangeChannelComponent_div_7_Template","ɵɵproperty","ɵɵadvance","tmp_1_0","get","hasError","tmp_2_0","tmp_3_0","invalid","control","hasSpaces","test"],"sources":["C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\change-channel\\change-channel.component.ts","C:\\Users\\ciyas\\Desktop\\formation_java\\ProjetJury\\FrontEndCertif\\src\\app\\component\\change-channel\\change-channel.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, Input } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Channel } from 'src/app/Model/channel';\r\nimport { User } from 'src/app/Model/user';\r\nimport { ChannelService } from 'src/app/Service/channel.service';\r\nimport { UserService } from 'src/app/Service/user.service';\r\n\r\n@Component({\r\n  selector: 'app-change-channel',\r\n  templateUrl: './change-channel.component.html',\r\n  styleUrls: ['./change-channel.component.css'],\r\n})\r\nexport class ChangeChannelComponent {\r\n  channelModificationForm: FormGroup;\r\n\r\n  @Input() actualChannel!: Channel;\r\n  currentUser: User | null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private cs: ChannelService,\r\n    private ar: ActivatedRoute,\r\n    private route: Router\r\n  ) {\r\n    // récupérer le user de la session en cours\r\n    this.currentUser = this.userService.getCurrentUser();\r\n\r\n    this.channelModificationForm = this.fb.group({\r\n      channelName: ['', [Validators.required, noSpacesValidator]],\r\n      channelDescription: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.channelModificationForm.controls['channelName'].setValue(\r\n      this.actualChannel.channelName\r\n    );\r\n    this.channelModificationForm.controls['channelDescription'].setValue(\r\n      this.actualChannel.channelDescription\r\n    );\r\n  }\r\n\r\n  updateChannel(event: Event) {\r\n    // si l'utilisateur est connecté, on modifie le canal\r\n    if (this.currentUser) {\r\n      const modifiedChannel = {\r\n        channelId: '',\r\n        channelName: this.channelModificationForm.value.channelName,\r\n        channelDescription:\r\n          this.channelModificationForm.value.channelDescription,\r\n        locked: 0,\r\n        creationDate: new Date(),\r\n        user: this.currentUser,\r\n      };\r\n      this.cs.patchChannel(modifiedChannel).subscribe((response) => {\r\n        // Gérez la réponse du serveur\r\n        console.log('Réponse du serveur :', response);\r\n        alert('Votre canal a bien été modifié');\r\n      });\r\n    }\r\n    // sinon, on le redirige vers la page de connexion\r\n    else {\r\n      alert('Veuillez vous connecter');\r\n      this.route.navigate(['/login']);\r\n    }\r\n  }\r\n}\r\n\r\n// validateur personnalisé pour vérifier si une chaîne de caractères contient des espaces\r\nfunction noSpacesValidator(control: AbstractControl) {\r\n  const hasSpaces = /\\s/.test(control.value);\r\n  return hasSpaces ? { hasSpaces: true } : null;\r\n}","<form [formGroup]=\"channelModificationForm\" (submit)=\"updateChannel($event)\">\r\n  <input\r\n    type=\"text\"\r\n    id=\"channelName\"\r\n    name=\"channelName\"\r\n    formControlName=\"channelName\"\r\n    placeholder=\"Nom du canal\"\r\n  />\r\n  <div *ngIf=\"channelModificationForm.get('channelName')?.hasError('required')\">\r\n    <p>Veuillez indiquer un nom de canal.</p>\r\n  </div>\r\n  <div\r\n    *ngIf=\"channelModificationForm.get('channelName')?.hasError('hasSpaces')\"\r\n  >\r\n    <p>Veuillez ne pas utiliser d'espace.</p>\r\n  </div>\r\n  <br /><br />\r\n  <input\r\n    type=\"text\"\r\n    id=\"description\"\r\n    name=\"description\"\r\n    formControlName=\"channelDescription\"\r\n    placeholder=\"Description\"\r\n  />\r\n  <div *ngIf=\"channelModificationForm.get('description')?.hasError('required')\">\r\n    <p>Veuillez entrer une description.</p>\r\n  </div>\r\n  <br /><br />\r\n  <button [disabled]=\"channelModificationForm.invalid\">\r\n    Modifier\r\n  </button>\r\n</form>"],"mappings":";AAEA,SAIEA,UAAU,QACL,gBAAgB;;;;;;;;;ICCrBC,EAAA,CAAAC,cAAA,UAA8E;IACzED,EAAA,CAAAE,MAAA,yCAAkC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;IAE3CH,EAAA,CAAAC,cAAA,UAEC;IACID,EAAA,CAAAE,MAAA,yCAAkC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;IAU3CH,EAAA,CAAAC,cAAA,UAA8E;IACzED,EAAA,CAAAE,MAAA,uCAAgC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;ADN3C,OAAM,MAAOC,sBAAsB;EAMjCC,YACUC,EAAe,EACfC,WAAwB,EACxBC,EAAkB,EAClBC,EAAkB,EAClBC,KAAa;IAJb,KAAAJ,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,KAAK,GAALA,KAAK;IAEb;IACA,IAAI,CAACC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE;IAEpD,IAAI,CAACC,uBAAuB,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC3CC,WAAW,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACiB,QAAQ,EAAEC,iBAAiB,CAAC,CAAC;MAC3DC,kBAAkB,EAAE,CAAC,EAAE,EAAE,CAACnB,UAAU,CAACiB,QAAQ,CAAC;KAC/C,CAAC;EACJ;EAEAG,QAAQA,CAAA;IACN,IAAI,CAACN,uBAAuB,CAACO,QAAQ,CAAC,aAAa,CAAC,CAACC,QAAQ,CAC3D,IAAI,CAACC,aAAa,CAACP,WAAW,CAC/B;IACD,IAAI,CAACF,uBAAuB,CAACO,QAAQ,CAAC,oBAAoB,CAAC,CAACC,QAAQ,CAClE,IAAI,CAACC,aAAa,CAACJ,kBAAkB,CACtC;EACH;EAEAK,aAAaA,CAACC,KAAY;IACxB;IACA,IAAI,IAAI,CAACb,WAAW,EAAE;MACpB,MAAMc,eAAe,GAAG;QACtBC,SAAS,EAAE,EAAE;QACbX,WAAW,EAAE,IAAI,CAACF,uBAAuB,CAACc,KAAK,CAACZ,WAAW;QAC3DG,kBAAkB,EAChB,IAAI,CAACL,uBAAuB,CAACc,KAAK,CAACT,kBAAkB;QACvDU,MAAM,EAAE,CAAC;QACTC,YAAY,EAAE,IAAIC,IAAI,EAAE;QACxBC,IAAI,EAAE,IAAI,CAACpB;OACZ;MACD,IAAI,CAACH,EAAE,CAACwB,YAAY,CAACP,eAAe,CAAC,CAACQ,SAAS,CAAEC,QAAQ,IAAI;QAC3D;QACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,QAAQ,CAAC;QAC7CG,KAAK,CAAC,gCAAgC,CAAC;MACzC,CAAC,CAAC;;IAEJ;IAAA,KACK;MACHA,KAAK,CAAC,yBAAyB,CAAC;MAChC,IAAI,CAAC3B,KAAK,CAAC4B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEnC;;AAGF;AAAAC,MAAA,GAzDanC,sBAAsB;;mBAAtBA,MAAsB,EAAAJ,EAAA,CAAAwC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAA1C,EAAA,CAAAwC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAA5C,EAAA,CAAAwC,iBAAA,CAAAK,EAAA,CAAAC,cAAA,GAAA9C,EAAA,CAAAwC,iBAAA,CAAAO,EAAA,CAAAC,cAAA,GAAAhD,EAAA,CAAAwC,iBAAA,CAAAO,EAAA,CAAAE,MAAA;AAAA;;QAAtB7C,MAAsB;EAAA8C,SAAA;EAAAC,MAAA;IAAA7B,aAAA;EAAA;EAAA8B,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCnBnCzD,EAAA,CAAAC,cAAA,cAA6E;MAAjCD,EAAA,CAAA2D,UAAA,oBAAAC,uDAAAC,MAAA;QAAA,OAAUH,GAAA,CAAAnC,aAAA,CAAAsC,MAAA,CAAqB;MAAA,EAAC;MAC1E7D,EAAA,CAAA8D,SAAA,eAME;MACF9D,EAAA,CAAA+D,UAAA,IAAAC,qCAAA,iBAEM;MACNhE,EAAA,CAAA+D,UAAA,IAAAE,qCAAA,iBAIM;MACNjE,EAAA,CAAA8D,SAAA,SAAM;MAQN9D,EAAA,CAAA+D,UAAA,IAAAG,qCAAA,iBAEM;MACNlE,EAAA,CAAA8D,SAAA,SAAM;MACN9D,EAAA,CAAAC,cAAA,iBAAqD;MACnDD,EAAA,CAAAE,MAAA,kBACF;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;;;;MA9BLH,EAAA,CAAAmE,UAAA,cAAAT,GAAA,CAAA7C,uBAAA,CAAqC;MAQnCb,EAAA,CAAAoE,SAAA,GAAsE;MAAtEpE,EAAA,CAAAmE,UAAA,UAAAE,OAAA,GAAAX,GAAA,CAAA7C,uBAAA,CAAAyD,GAAA,kCAAAD,OAAA,CAAAE,QAAA,aAAsE;MAIzEvE,EAAA,CAAAoE,SAAA,GAAuE;MAAvEpE,EAAA,CAAAmE,UAAA,UAAAK,OAAA,GAAAd,GAAA,CAAA7C,uBAAA,CAAAyD,GAAA,kCAAAE,OAAA,CAAAD,QAAA,cAAuE;MAYpEvE,EAAA,CAAAoE,SAAA,GAAsE;MAAtEpE,EAAA,CAAAmE,UAAA,UAAAM,OAAA,GAAAf,GAAA,CAAA7C,uBAAA,CAAAyD,GAAA,kCAAAG,OAAA,CAAAF,QAAA,aAAsE;MAIpEvE,EAAA,CAAAoE,SAAA,GAA4C;MAA5CpE,EAAA,CAAAmE,UAAA,aAAAT,GAAA,CAAA7C,uBAAA,CAAA6D,OAAA,CAA4C;;;;;;ADiDtD,SAASzD,iBAAiBA,CAAC0D,OAAwB;EACjD,MAAMC,SAAS,GAAG,IAAI,CAACC,IAAI,CAACF,OAAO,CAAChD,KAAK,CAAC;EAC1C,OAAOiD,SAAS,GAAG;IAAEA,SAAS,EAAE;EAAI,CAAE,GAAG,IAAI;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}